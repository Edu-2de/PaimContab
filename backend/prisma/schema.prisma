generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  name           String
  avatarUrl      String?
  isActive       Boolean        @default(true)
  role           String         @default("customer")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscriptions  Subscription[]
  ConsultingSession ConsultingSession[]
  Company Company?
}

model Company {
  id                String    @id @default(uuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @unique 
  companyName       String    
  legalName         String?   
  cnpj              String?   @unique 
  businessType      String    @default("MEI") 
  mainActivity      String?   
  secondaryActivity String?   
  businessSegment   String?   
  address           String?
  addressNumber     String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  zipCode           String?
  businessPhone     String?
  businessEmail     String?
  website           String?
  taxRegime         String?   
  monthlyRevenue    Float?    
  employeeCount     Int       @default(0) 
  foundationDate    DateTime? 
  isActive          Boolean   @default(true)
  notes             String?   
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos MEI
  receitas          Receita[]
  despesas          Despesa[]
  dasCalculations   DASCalculation[]
  calendarEvents    CalendarEvent[]
}



model Plan {
  id          String          @id @default(uuid())
  name        String          
  price       Float         
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  subscriptions Subscription[]
}


model Subscription {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  plan       Plan      @relation(fields: [planId], references: [id])
  planId     String
  startDate  DateTime  @default(now())
  endDate    DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model ConsultingSession {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  scheduledAt   DateTime    
  duration      Int         
  status        String      
  notes         String?     
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Modelos MEI
model Receita {
  id            String   @id @default(uuid())
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  description   String
  value         Float
  date          DateTime
  category      String
  clientName    String?
  invoiceNumber String?
  paymentMethod String   @default("PIX") // PIX, Dinheiro, Cartão Débito, Cartão Crédito, Transferência, Boleto
  status        String   @default("Recebido") // Recebido, Pendente, Cancelado
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Despesa {
  id            String   @id @default(uuid())
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  description   String
  value         Float
  date          DateTime
  category      String
  supplier      String?
  invoiceNumber String?
  paymentMethod String   @default("PIX") // PIX, Dinheiro, Cartão Débito, Cartão Crédito, Transferência, Boleto
  status        String   @default("Pago") // Pago, Pendente, Cancelado
  isDeductible  Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DASCalculation {
  id          String   @id @default(uuid())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  month       String   // YYYY-MM format
  revenue     Float
  dasValue    Float
  dueDate     DateTime
  isPaid      Boolean  @default(false)
  paymentDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, month])
}

model CalendarEvent {
  id          String   @id @default(uuid())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  type        String   @default("appointment") // appointment, meeting, deadline, reminder, das_due
  priority    String   @default("medium") // low, medium, high
  status      String   @default("scheduled") // scheduled, completed, cancelled
  location    String?
  isAllDay    Boolean  @default(false)
  recurrence  String?  // none, daily, weekly, monthly, yearly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}