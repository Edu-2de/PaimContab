generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  name           String
  avatarUrl      String?
  isActive       Boolean        @default(true)
  role           String         @default("customer")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subscriptions  Subscription[]
  ConsultingSession ConsultingSession[]
  Company Company[]
}

model Company {
  id                String    @id @default(uuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @unique 
  companyName       String    
  legalName         String?   
  cnpj              String?   @unique 
  businessType      String    @default("MEI") 
  mainActivity      String?   
  secondaryActivity String?   
  businessSegment   String?   
  address           String?
  addressNumber     String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  zipCode           String?
  businessPhone     String?
  businessEmail     String?
  website           String?
  taxRegime         String?   
  monthlyRevenue    Float?    
  employeeCount     Int       @default(0) 
  foundationDate    DateTime? 
  isActive          Boolean   @default(true)
  notes             String?   
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}



model Plan {
  id          String          @id @default(uuid())
  name        String          
  price       Float         
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  subscriptions Subscription[]
}


model Subscription {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  plan       Plan      @relation(fields: [planId], references: [id])
  planId     String
  startDate  DateTime  @default(now())
  endDate    DateTime?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model ConsultingSession {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  scheduledAt   DateTime    
  duration      Int         
  status        String      
  notes         String?     
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}